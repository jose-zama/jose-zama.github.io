---
layout: post
title:  "Planning and estimating"
categories: SoftwareEngineering
---

## Estimation of a story point

### Estimate as a team

Team defines the story point. Team discusses and ask questions to customer about the story point. Then each developer writes an estimate on a card. When everyone finishes all turn their cards over and justify their estimates.

Reasons are discussed and estimating reconciled. Disagreement is good, it helps to think about different approaches. After discussion, estimate again. Reasonableness is more important than precision.

In scrum, when estimating is common to use **story points**. Count the story points completed in a sprint. The average is the velocity team. Use it for future sprint estimation. Consider:

- Any change to the team
- Any change to the environment
- Any change to the process
- Any change to the estimation process

## Planning a release

Is to plan when to release and what to release. What are the stories to include in a release and should be clasified with MoSCoW :

- Must have
- Should have
- Could have
- Would have, or wont have this time

### Prioritizing user stories

Have to take into account how desirable are the stories:

- To a broad base of users/customers?
- To a small number of important users/customers?

Also consider the cohesiveness of the feature and the risk if it is not completed. Developers and users may have different prioritization. However the final decision and responsibility is taken by the product owner.

Users will prioritize according to what delivers more value to their business. Hovewer developers should support them in terms of:

- Dependency
- Cost
- Performance

### Creating a release plan

Decide how many points can be done within a sprint. Divide all the story points in sprints based on this number and according to its priority. A release plan may be a cluster of stories on a board, or a list in a spreadsheet or another suitable format.

### Planning a sprint

Team discuss stories with the customer. Split the story in constituent tasks. One developer takes responsibility of each task. Developers individually estimate the tasks they have accepted. Ultimately completion is responsibility of the whole team.

	